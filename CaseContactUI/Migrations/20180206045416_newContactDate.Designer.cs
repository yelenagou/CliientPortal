// <auto-generated />
using CaseContactUI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace CaseContactUI.Migrations
{
    [DbContext(typeof(CaseContactUiDbContext))]
    [Migration("20180206045416_newContactDate")]
    partial class newContactDate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CaseContactUI.Data.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddressLineOne")
                        .HasMaxLength(40);

                    b.Property<string>("AddressLineTwo")
                        .HasMaxLength(30);

                    b.Property<string>("City")
                        .HasMaxLength(30);

                    b.Property<DateTime>("DateInserted")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid?>("NewContactId");

                    b.Property<Guid?>("OpposingPartyId");

                    b.Property<string>("State")
                        .HasMaxLength(10);

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("NewContactId");

                    b.HasIndex("OpposingPartyId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("CaseContactUI.Data.Entities.Attorney", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateAttorneyHired");

                    b.Property<DateTime?>("DateFinishedworking");

                    b.Property<string>("FirmName")
                        .HasMaxLength(40);

                    b.Property<string>("FirstName")
                        .HasMaxLength(40);

                    b.Property<string>("LastName")
                        .HasMaxLength(40);

                    b.Property<Guid?>("NewContactId");

                    b.Property<Guid?>("OpposingPartyId");

                    b.Property<bool?>("requestMade");

                    b.Property<bool?>("stillWorking");

                    b.HasKey("Id");

                    b.HasIndex("NewContactId");

                    b.HasIndex("OpposingPartyId");

                    b.ToTable("Attorney");
                });

            modelBuilder.Entity("CaseContactUI.Data.Entities.ContactInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateOfContactInfo")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("EmailAddress");

                    b.Property<string>("FacebookAccount")
                        .HasMaxLength(40);

                    b.Property<string>("MobileNumber");

                    b.Property<Guid?>("NewContactId");

                    b.Property<Guid?>("OpposingPartyId");

                    b.Property<string>("TelephoneNumber");

                    b.Property<string>("TwitterAccount")
                        .HasMaxLength(40);

                    b.HasKey("Id");

                    b.HasIndex("NewContactId");

                    b.HasIndex("OpposingPartyId");

                    b.ToTable("ContactInfo");
                });

            modelBuilder.Entity("CaseContactUI.Data.Entities.ListCaseTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CaseTypeDescription");

                    b.HasKey("Id");

                    b.ToTable("ListCaseTypes");
                });

            modelBuilder.Entity("CaseContactUI.Data.Entities.NewContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<DateTime>("DateOfNewContact")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("FirstName")
                        .HasMaxLength(40);

                    b.Property<bool?>("HaveSomethingFileWithCourt");

                    b.Property<bool?>("InquiringForSomeoneElse");

                    b.Property<string>("LastName")
                        .HasMaxLength(40);

                    b.Property<bool?>("ReadyForRegistration");

                    b.Property<string>("ReasonForContacting");

                    b.Property<string>("SocialSecurity")
                        .HasMaxLength(14);

                    b.Property<string>("TelephoneNumber");

                    b.HasKey("Id");

                    b.ToTable("NewContact");
                });

            modelBuilder.Entity("CaseContactUI.Data.Entities.OpposingParty", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("FirstName")
                        .HasMaxLength(40);

                    b.Property<string>("LastName")
                        .HasMaxLength(40);

                    b.Property<string>("SocialSecurity")
                        .HasMaxLength(14);

                    b.HasKey("Id");

                    b.ToTable("OpposingParty");
                });

            modelBuilder.Entity("CaseContactUI.Data.Entities.ThirdParty", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("AddessLineTwo")
                        .HasMaxLength(40);

                    b.Property<string>("Address")
                        .HasMaxLength(40);

                    b.Property<string>("BestTimeToContact");

                    b.Property<string>("BestWayToContact");

                    b.Property<DateTime>("DateInserted")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("EmailAddress");

                    b.Property<string>("FirstName")
                        .HasMaxLength(40);

                    b.Property<string>("LastName")
                        .HasMaxLength(40);

                    b.Property<Guid>("NewContactId");

                    b.Property<string>("ReasonForContacting")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("SocialSecurity")
                        .HasMaxLength(14);

                    b.Property<string>("TelephoneNumber")
                        .IsRequired();

                    b.Property<string>("ThirdPartyNotes")
                        .HasMaxLength(300);

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("ThirdParty");
                });

            modelBuilder.Entity("CaseContactUI.Data.Entities.Address", b =>
                {
                    b.HasOne("CaseContactUI.Data.Entities.NewContact", "NewContact")
                        .WithMany("Address")
                        .HasForeignKey("NewContactId");

                    b.HasOne("CaseContactUI.Data.Entities.OpposingParty")
                        .WithMany("Address")
                        .HasForeignKey("OpposingPartyId");
                });

            modelBuilder.Entity("CaseContactUI.Data.Entities.Attorney", b =>
                {
                    b.HasOne("CaseContactUI.Data.Entities.NewContact", "NewContact")
                        .WithMany("PreviousAttorney")
                        .HasForeignKey("NewContactId");

                    b.HasOne("CaseContactUI.Data.Entities.OpposingParty", "OpposingParty")
                        .WithMany("CurrentAttorney")
                        .HasForeignKey("OpposingPartyId");
                });

            modelBuilder.Entity("CaseContactUI.Data.Entities.ContactInfo", b =>
                {
                    b.HasOne("CaseContactUI.Data.Entities.NewContact", "NewContact")
                        .WithMany("ContactInfo")
                        .HasForeignKey("NewContactId");

                    b.HasOne("CaseContactUI.Data.Entities.OpposingParty", "OpposingParty")
                        .WithMany("ContactInfo")
                        .HasForeignKey("OpposingPartyId");
                });

            modelBuilder.Entity("CaseContactUI.Data.Entities.OpposingParty", b =>
                {
                    b.HasOne("CaseContactUI.Data.Entities.NewContact", "NewContact")
                        .WithOne("OpposingParty")
                        .HasForeignKey("CaseContactUI.Data.Entities.OpposingParty", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CaseContactUI.Data.Entities.ThirdParty", b =>
                {
                    b.HasOne("CaseContactUI.Data.Entities.NewContact", "NewContact")
                        .WithOne("ThirdPartyInfo")
                        .HasForeignKey("CaseContactUI.Data.Entities.ThirdParty", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
